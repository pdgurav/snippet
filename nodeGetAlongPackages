chalk, colored cmd
minimist, to process argv
progress, to show progess bars
readline, readline-sync, inquirer, accepting args in command line 1 by1
npx node@10.2 -v
=============================================================================


process.exit(1) //"STIGTERM", "STIGKILL"
process.env
process.argv
=============================================================================
process.nextTick(); //Every time the event loop takes a full trip, we call it a tick.
When we pass a function to process.nextTick(),
we instruct the engine to invoke this function at the end of the current operation, before the next event loop tick starts:

process.nextTick(() => {
  //do something
})
It's the way we can tell the JS engine to process a function asynchronously (after the current function),
but as soon as possible, not queue it.
Calling setTimeout(() => {}, 0) will execute the function at the end of next tick,
much later than when using nextTick() which prioritizes the call and executes it just before the beginning of the next tick.

Use nextTick() when you want to make sure that in the next event loop iteration that code is already executed.
=============================================================================
When you want to execute some piece of code asynchronously, 
but as soon as possible, one option is to use the setImmediate() function provided by Node.js:

setImmediate(() => {
  //run something
});


How is setImmediate() different from setTimeout(() => {}, 0) (passing a 0ms timeout), and from process.nextTick()?

A function passed to process.nextTick() is going to be executed on the current iteration of the event loop,
after the current operation ends. This means it will always execute before setTimeout and setImmediate.

A setTimeout() callback with a 0ms delay is very similar to setImmediate(). 
The execution order will depend on various factors, but they will be both run in the next iteration of the event loop.
===================================================================================
setInterval starts a function every n milliseconds, without any consideration about when a function finished its execution.

1) setTimeout
2) setInterval
3) setImmediate
4) process.nextTick

